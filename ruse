#!/usr/bin/env bash
# Ruse front-end script
# By Adriaan Larmuseau

############################
# Script variables
############################
options="nslpdfwc"
Usage="Usage : `basename $0` [-$options] sourcefile"
slast="${@:(-2):1}"
last=${!#}
cscheme=racket
cml=ocaml
IFS=""
spms="" # ex : a.c,b.c
fflag=0
lflag=0
bflag=0
cflag=0
pflag=0
niflag=0
debopt=""
warnopt=-w
byteopt="BYTE"
langopt="ALL"
platform=""
front="./front-end"
language=""
byte_1=""
byte_2=""
tmp_native_1="/tmp/input1.c"
tmp_native_2="/tmp/input2.c"
native_1="buildsrc/input1.c"
native_2="buildsrc/input2.c"
unamestr_os=`uname`
base=""
bytext=""


############################
# Function :: Capitalize
# Captilaze a string
############################
function capitalize
{
    local ret=$(echo $1 | tr "[:lower:]" "[:upper:]")
    echo $ret
}


############################
# Function :: Log
# Log debug output
############################
function log
{

    if [ $# -ne 6 ]; then
        echo -e "Log needs 4 arguments"
        exit 1
    fi

    #todo improve
    local logname="test/$language/log/$(basename $1)_log" 

    echo > $logname
    echo "Platform :: $(capitalize $platform)" >> $logname
    echo "Language :: $(capitalize $language)" >> $logname
    echo >> $logname
    echo $2 >> $logname 
    echo >> $logname
    echo "================= INSECURE INPUT =================" >> $logname
    echo >> $logname
	cat $5 >> $logname
    echo >> $logname
    echo "================= SECURE INPUT =================" >> $logname
    echo >> $logname
    cat $6 >> $logname
    echo >> $logname
    echo "================= INSECURE INPUT:: C =================" >> $logname
    echo >> $logname
    cat $3 >> $logname
    echo >> $logname
    echo "================= SECURE INPUT:: C =================" >> $logname
    echo >> $logname
    cat $4 >> $logname
}


############################
# Function :: Execute
# run baby run
############################
function execute
{
	debex=${debopt/-D/.} 
    if [[ "$platform" == "sancus" ]]; then
        sancus-sim ./bin/exec.elf
    elif [[ $# -eq 2 ]]; then
        ./bin/ruse.$langopt.${byteopt}${debex} $1 $2 2> /tmp/ruse_log
    else
        ./bin/ruse.$langopt.$byteopt${debex} 2> /tmp/ruse_log
    fi

    #logging
    if [[ $lflag -eq 1 ]]; then
        local trace=$(</tmp/ruse_log) 
        if [[ $# -eq 2 ]]; then
            ./tools/bytetoc.pl  $1 > $native_1
            ./tools/bytetoc.pl --secure $2 > $native_2
        fi
        log $last $trace $native_1 $native_2 $byte_1 $byte_2
	else
		cat /tmp/ruse_log
    fi
    
}

############################
# Function :: Preprocess
# Preprocess the buildsrc
#   needs the source
############################
function preprocess
{ 

    #=====================================
    # Multi language support
    #=====================================
    filename=$(basename "$1" 2> /dev/null) # || { niflag=1; return 0; }
    extension="${filename##*.}"
    base="${filename%.*}"

    case "$extension" in

        "scm") 
            language="scheme"
            bytext="byte_scm"
            byte_1="/tmp/input1.byte_scm"
            byte_2="/tmp/input2.byte_scm"
            $cscheme $front/scheme/genc.scm < $1 > buildsrc/result.parser

            #todo only when no file input
            awk '/==@@==PARSER==@@==/{x="/tmp/input"++i".byte_scm";next}{print > x;}' buildsrc/result.parser
            ;;

        "ml") 
			exit 1;
            language="ml"
            bytext="byte_ml"
            byte_1="/tmp/input1.byte_ml"
            byte_2="/tmp/input2.byte_ml"
            #TODO implement
            $front/ml/miniml $1 > buildsrc/input.c 2>/dev/null || { echo "Front-end failed, aborting ruse"; exit 1; }
            ;;

        "byte_scm") 
            language="scheme" 
            bytext="byte_scm"
            byte_1="/tmp/input1.byte_scm"
            byte_2="/tmp/input2.byte_scm"
            cp $2 $byte_1
            cp $1 $byte_2
            ;;

        "byte_ml")
			exit 1;
            language="ml"
            bytext="byte_ml"
            byte_1="/tmp/input1.byte_ml"
            byte_2="/tmp/input2.byte_ml"
            cp $2 $byte_1
            cp $1 $byte_2
            ;;

        *) niflag=1
            ;;

    esac
    
}


############################
# Function :: Fides
# Fides generation - TODO
############################
function fides
{
    (IFS=,
        for spm in $spms; do
            echo "Generating code for $spm"
            fides/generate.pl buildsrc/$spm
            mv buildsrc/{$spm//\.c/\.spm} buildsrc/bin/{$spm//\.c/\.spm} 
        done)
}


############################
# Function :: Compile
# Compile
############################
function compile
{

    #clear buildsrc
    make clean -s --directory=buildsrc 2>/dev/null

    # copy all cesk to buildsrc - rewriting strategy ?
    if [[ $bflag -eq 1 ]]; then
        cp -p $tmp_native_1 $native_1
        cp -p $tmp_native_2 $native_2
    fi
    cp -p cesk/*.c buildsrc
    cp -p cesk/*.h buildsrc

    # Make Ocaml front-end
    #make -s --directory=$front/ml/ >/dev/null 2>&1 || { echo "Front-end compilation, aborting ruse"; exit 1; }

    # Make 
    make $platform -s --directory=buildsrc LANG=-D$langopt DEBOPT=$debopt CWARNFLAGS=$warnopt BYTEOPT=-D$byteopt  2>&1  || { echo "Compilation failed, aborting ruse"; exit 1; }
}


#=====================================
# Execute
#=====================================

# we want at least one parameter (it may be a flag or an argument)
if [[ $# -eq 0 ]]; then
	echo $Usage >&2
	exit 1
fi

# find ocaml
type $cml >/dev/null 2>&1 || { echo -e >&2 "ERROR :: $cml must be add to the PATH of the current shell"; exit 1; }

# find racket
type $cscheme >/dev/null 2>&1 || { echo -e >&2 
    "ERROR :: $cscheme must be add to the PATH of the current shell\n Add PATH=\$PATH:/Applications/Racket\ <version>/bin/ to your shell rc"; exit 1; }


# get options 
while getopts "$options" OPTION
do
	case $OPTION in

    # native add in code
    n) bflag=1
        ;;

    # sancus as platform
    s)  if [[ "$unamestr_os" == 'Linux' ]]; then 
            # TODO add extra checks
            platform="sancus"
            bflag=1
        else
            echo "Sancus only supported on Linux, aborting ruse"; 
            exit 1; 
        fi
            ;;

    # compile
    c)  cflag=1
        ;;

    # only parsing  
    p)  pflag=1
        ;;
         
    # use fides
	f)	fflag=1
		;;

    # debug version 
    d)  debopt=-DDEBUG 
        ;;

    # generate warnings
    w)  warnopt="-Wall -Wextra"
        ;;

	# logging
	l) debopt=-DDEBUG
	   lflag=1
		;;

	?)	echo $Usage >&2
		exit 1
		;;
	esac
done

# generate byte code
preprocess $last $slast

if [[ $pflag -eq 1 ]]; then

    cp "$byte_1" "${base}.insec.$bytext"
    cp "$byte_2" "${base}.sec.$bytext"

    #finito
    exit 0
fi

# do we need to load the bytecode into the binary ?
if [[ $bflag -eq 1  ]]; then
    if [[ $niflag -eq 1 ]];then
        echo "Native requires a source file"
        exit 1
    fi
    cflag=1
    byteopt=NATIVE
    ./tools/bytetoc.pl  "$byte_1" > $tmp_native_1
    ./tools/bytetoc.pl --secure $byte_2 > $tmp_native_2
fi



# do we need to compile ?
if [[ $cflag -eq 1 ]]; then
    compile
fi

# run baby run
if [[ $niflag -ne 1 ]]; then
    if [[ $bflag -eq 1 ]]; then
        execute
    else
        execute $byte_1 $byte_2
    fi
fi

